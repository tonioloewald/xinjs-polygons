{"mappings":"A,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,C,EEaO,SAAS,EAAM,CAAQ,CAAE,CAAQ,EACtC,OAAO,EAAE,CAAA,CAAI,EAAE,CAAA,CAAI,GAAO,CAAA,EAAE,CAAA,CAAI,EAAE,CAAA,CAAI,EAAE,CAAA,CAAI,EAAE,CAAA,CAAK,AAAA,CAAA,EAAE,CAAA,CAAI,EAAE,CAAA,AAAA,EAAM,CAAA,EAAE,CAAA,CAAI,EAAE,CAAA,AAAA,CAAA,CAC3E,CAEO,SAAS,EAAgB,CAAc,EAC5C,GAAM,CAAC,EAAS,EAAS,CAAG,EAAO,KAAA,CAAM,KAAK,MAAA,CAAO,CAAC,EAAoC,KACxF,GAAM,CAAC,EAAG,EAAE,CAAG,SACf,AAAI,AAAM,KAAA,IAAN,EACK,CAAC,EAAG,OAAO,GAAK,EAEvB,EAAE,IAAA,CAAK,CAAC,EAAA,EAAG,EAAG,OAAO,EAAI,GAClB,CAAC,EAAG,KAAA,EAAU,CAEzB,EAAG,CAAC,EAAE,CAAa,KAAA,EAAU,EAC7B,GAAI,AAAa,KAAA,IAAb,EACF,MAAM,AAAI,MAAM,6CAElB,OAAO,CACT,CAEO,SAAS,EAAgB,CAAe,EAC7C,OAAO,EAAO,GAAA,CAAI,AAAA,GAAK,CAAC,EAAE,EAAE,CAAA,CAAE,CAAC,EAAE,EAAE,CAAA,CAAE,CAAC,EAAE,IAAA,CAAK,IAC/C,CAEO,SAAS,EAAS,CAAe,CAAE,EAAY,EAAG,SACvD,AAAI,EAAO,MAAA,CAAS,EACX,EAEF,EAAO,MAAA,CAAO,CAAC,EAAe,KAC/B,EAAK,MAAA,CAAS,EAChB,EAAK,OAAA,CAAQ,GAET,EAAK,EAAG,CAAI,CAAC,EAAE,CAAE,CAAI,CAAC,EAAE,EAAI,EAC9B,CAAI,CAAC,EAAE,CAAG,EAEV,EAAK,OAAA,CAAQ,GAGV,GACN,EAAE,CACP,CAEO,SAAS,EAAK,GAAG,CAAe,SACrC,AAAI,EAAO,MAAA,CAAS,EACX,EAEA,KAAK,GAAA,CAAI,EAAO,MAAA,CAAO,CAAC,EAAW,EAAG,KAC3C,IAAM,EAAI,AAAU,IAAV,EAAc,CAAM,CAAC,EAAO,MAAA,CAAS,EAAE,CAAG,CAAM,CAAC,EAAQ,EAAE,CACrE,OAAO,EAAY,EAAM,EAAG,EAC9B,EAAG,GAEP,C,E,E,Q,I,G,E,E,kB,I,G,E,E,kB,I,G,E,E,W,I,G,E,E,O,I,U,K,K,C,K,e,C,K,e,C,K,Q,C,K,I","sources":["<anon>","src/index.ts","src/polygons.ts"],"sourcesContent":["function $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $1b1afc9db28ebc9e$exports = {};\n\n$parcel$export($1b1afc9db28ebc9e$exports, \"_area\", () => $1b1afc9db28ebc9e$export$7fcd0f4809a1f255);\n$parcel$export($1b1afc9db28ebc9e$exports, \"stringToPolygon\", () => $1b1afc9db28ebc9e$export$a01e6b5107f59da5);\n$parcel$export($1b1afc9db28ebc9e$exports, \"polygonToString\", () => $1b1afc9db28ebc9e$export$7e15f8e95de272d5);\n$parcel$export($1b1afc9db28ebc9e$exports, \"simplify\", () => $1b1afc9db28ebc9e$export$798b53621063651);\n$parcel$export($1b1afc9db28ebc9e$exports, \"area\", () => $1b1afc9db28ebc9e$export$bb3edc44842b5f2e);\n// polygon utilies, used for cleaning up region data\n// will be broken out to its own library\nfunction $1b1afc9db28ebc9e$export$7fcd0f4809a1f255(a, b) {\n    return a.y * b.x - 0.5 * (a.x * a.y + b.x * b.y + (b.x - a.x) * (a.y - b.y));\n}\nfunction $1b1afc9db28ebc9e$export$a01e6b5107f59da5(source) {\n    const [polygon, leftover] = source.split(\",\").reduce((acc, num)=>{\n        const [p, x] = acc;\n        if (x === undefined) return [\n            p,\n            Number(num)\n        ];\n        else {\n            p.push({\n                x: x,\n                y: Number(num)\n            });\n            return [\n                p,\n                undefined\n            ];\n        }\n    }, [\n        [],\n        undefined\n    ]);\n    if (leftover !== undefined) throw new Error(\"odd number of coordinates (expected even)\");\n    return polygon;\n}\nfunction $1b1afc9db28ebc9e$export$7e15f8e95de272d5(points) {\n    return points.map((p)=>`${p.x},${p.y}`).join(\",\");\n}\nfunction $1b1afc9db28ebc9e$export$798b53621063651(points, threshold = 0.5) {\n    if (points.length < 4) return points;\n    return points.reduce((poly, p)=>{\n        if (poly.length < 2) poly.unshift(p);\n        else if ($1b1afc9db28ebc9e$export$bb3edc44842b5f2e(p, poly[0], poly[1]) < threshold) poly[0] = p;\n        else poly.unshift(p);\n        return poly;\n    }, []);\n}\nfunction $1b1afc9db28ebc9e$export$bb3edc44842b5f2e(...points) {\n    if (points.length < 3) return 0;\n    else return Math.abs(points.reduce((totalArea, p, index)=>{\n        const q = index === 0 ? points[points.length - 1] : points[index - 1];\n        return totalArea + $1b1afc9db28ebc9e$export$7fcd0f4809a1f255(p, q);\n    }, 0));\n}\n\n\n\n\nexport {$1b1afc9db28ebc9e$export$7fcd0f4809a1f255 as _area, $1b1afc9db28ebc9e$export$a01e6b5107f59da5 as stringToPolygon, $1b1afc9db28ebc9e$export$7e15f8e95de272d5 as polygonToString, $1b1afc9db28ebc9e$export$798b53621063651 as simplify, $1b1afc9db28ebc9e$export$bb3edc44842b5f2e as area};\n//# sourceMappingURL=index.js.map\n","export * from './polygons'","// polygon utilies, used for cleaning up region data\n// will be broken out to its own library\n\nexport interface Point {\n  x: number,\n  y: number\n}\n\nexport type Polygon = Point[]\n\n// this is the \"area\" of the triangle formced by 0, a, and b\n// it will be negative if ab goes from right-to-left\n\nexport function _area(a: Point, b: Point): number {\n  return a.y * b.x - 0.5 * (a.x * a.y + b.x * b.y + (b.x - a.x) * (a.y - b.y))\n}\n\nexport function stringToPolygon(source: string): Polygon {\n  const [polygon, leftover] = source.split(',').reduce((acc: [Polygon, number | undefined], num: string): [Polygon, number | undefined] => {\n    const [p, x] = acc\n    if (x === undefined) {\n      return [p, Number(num)]\n    } else {\n      p.push({x, y: Number(num)})\n      return [p, undefined]\n    }\n  }, [[] as Polygon, undefined])\n  if (leftover !== undefined) {\n    throw new Error('odd number of coordinates (expected even)')\n  }\n  return polygon\n}\n\nexport function polygonToString(points: Polygon): string {\n  return points.map(p => `${p.x},${p.y}`).join(',')\n}\n\nexport function simplify(points: Polygon, threshold = 0.5): Polygon {\n  if (points.length < 4) {\n    return points\n  }\n  return points.reduce((poly: Polygon, p: Point): Polygon => {\n    if (poly.length < 2) {\n      poly.unshift(p)\n    } else {\n      if (area(p, poly[0], poly[1]) < threshold) {\n        poly[0] = p\n      } else {\n        poly.unshift(p)\n      }\n    }\n    return poly\n  }, [] as Polygon)\n}\n\nexport function area(...points: Polygon): number {\n  if (points.length < 3) {\n    return 0\n  } else {\n    return Math.abs(points.reduce((totalArea, p, index) => {\n      const q = index === 0 ? points[points.length - 1] : points[index - 1]\n      return totalArea + _area(p, q)\n    }, 0))\n  }\n}"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$1b1afc9db28ebc9e$exports","$1b1afc9db28ebc9e$export$7fcd0f4809a1f255","a","b","y","x","$1b1afc9db28ebc9e$export$a01e6b5107f59da5","source","polygon","leftover","split","reduce","acc","num","p","undefined","Number","push","Error","$1b1afc9db28ebc9e$export$7e15f8e95de272d5","points","map","join","$1b1afc9db28ebc9e$export$798b53621063651","threshold","length","poly","unshift","$1b1afc9db28ebc9e$export$bb3edc44842b5f2e","Math","abs","totalArea","index","q","_area","stringToPolygon","polygonToString","simplify","area"],"version":3,"file":"index.js.map"}